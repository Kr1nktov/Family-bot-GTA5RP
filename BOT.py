import discord
from discord import app_commands
from discord.ext import commands
from discord.ui import Button, View, Select
from dotenv import load_dotenv
import os
import json


load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='/', intents=intents)
config_path = "info.json"


def read(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        return json.load(file)


def write(data, filename):
    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4)


def get_config_value(key):
    file_data = read(config_path)
    data = file_data.get(key)
    return data


def edit_config(key, value):
    file_data = read(config_path)
    file_data[key] = value
    write(file_data, config_path)
    return file_data


def is_admin():
    async def predicate(interaction):
        return interaction.user.guild_permissions.administrator
    return app_commands.check(predicate)


def in_allowed_channel_balance():
    balance_channel_id = get_config_value("balance_channel_id")

    async def predicate(interaction):
        return interaction.channel.id == balance_channel_id
    return app_commands.check(predicate)


def in_allowed_channel_auto():
    auto_channel_id = get_config_value("auto_channel_id")

    async def predicate(interaction):
        return interaction.channel.id == auto_channel_id
    return app_commands.check(predicate)


async def send_car_menu(channel):
    view = View(timeout=None)
    view.add_item(TakeCarButton())
    view.add_item(ReturnCarButton())
    view.add_item(ShowStatusButton())
    await channel.send("## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", view=view)


@bot.tree.command(name="setbalance", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
@is_admin()
@in_allowed_channel_balance()
async def setbalance(interaction: discord.Interaction, amount: int):
    balance = get_config_value("balance")
    balance += amount
    edit_config("balance", balance)

    embed = discord.Embed(title="–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                          description=f'{interaction.user.mention} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {balance}$.',
                          color=discord.Color.purple())
    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="checkbalance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
@in_allowed_channel_balance()
async def checkbalance(interaction: discord.Interaction):
    balance = get_config_value("balance")
    embed = discord.Embed(title=f"–ë–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {balance}$",
                          description=f'{interaction.user.mention} –ø—Ä–æ–≤–µ—Ä–∏–ª –±–∞–ª–∞–Ω—Å.',
                          color=discord.Color.blue())
    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="addbalance", description="–î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∫ –±–∞–ª–∞–Ω—Å—É.")
@in_allowed_channel_balance()
async def addbalance(interaction: discord.Interaction, amount: int, reason: str = "–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã"):
    balance = get_config_value("balance")
    balance += amount
    edit_config("balance", balance)

    embed = discord.Embed(title='–ü–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                          description=f'{interaction.user.mention} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount}$. \n'
                                      f'–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {balance}$. \n'
                                      f'–ü—Ä–∏—á–∏–Ω–∞: {reason}',
                          color=discord.Color.green())

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="removebalance", description="–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞.")
@in_allowed_channel_balance()
async def removebalance(interaction: discord.Interaction, amount: int, reason: str = "–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã"):
    balance = get_config_value("balance")
    if amount > balance:
        embed = discord.Embed(title='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
                              description=f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$.',
                              color=discord.Color.red())
        await interaction.response.send_message(embed=embed)
    else:
        balance -= amount
        edit_config("balance", balance)
        embed = discord.Embed(title='–°–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                              description=f'{interaction.user.mention} —Å–Ω—è–ª —Å–æ —Å—á—ë—Ç–∞ {amount}$. \n'
                                          f'–ü–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –±–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {balance}$. \n'
                                          f'–ü—Ä–∏—á–∏–Ω–∞: {reason}',
                              color=discord.Color.yellow())
        await interaction.response.send_message(embed=embed)


@bot.tree.command(name='add_car')
@is_admin()
@in_allowed_channel_auto()
async def add_car(interaction: discord.Interaction, car_name: str):
    cars = get_config_value("cars")
    if car_name not in cars:
        cars.append(car_name)
        edit_config("cars", cars)
        await interaction.response.send_message(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.", ephemeral=True)
    else:
        await interaction.response.send_message(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral=True)


@bot.tree.command(name='remove_car')
@is_admin()
@in_allowed_channel_auto()
async def remove_car(interaction: discord.Interaction, car_name: str):
    taken_cars = get_config_value("taken_cars")
    cars = get_config_value("cars")

    if car_name in cars:
        cars.remove(car_name)
        taken_cars = {user: car for user, car in taken_cars.items() if car != car_name}

        edit_config("cars", cars)
        edit_config("taken_cars", taken_cars)

        await interaction.response.send_message(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", ephemeral=True)

    else:
        await interaction.response.send_message(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)


class TakeCarButton(Button):
    def __init__(self):
        super().__init__(label="–í–∑—è—Ç—å –∞–≤—Ç–æ", style=discord.ButtonStyle.green)

    async def callback(self, interaction: discord.Interaction):
        cars = get_config_value("cars")
        taken_cars = get_config_value("taken_cars")
        available_cars = [car for car in cars if car not in taken_cars.values()]
        if available_cars:
            select = SelectCar(available_cars=available_cars)
            view = View()
            view.add_item(select)
            await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", view=view, ephemeral=True)
        else:
            await interaction.response.send_message("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.", ephemeral=True)


class SelectCar(Select):
    def __init__(self, available_cars):
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", options=[
            discord.SelectOption(label=car) for car in available_cars])

    async def callback(self, interaction: discord.Interaction):
        chosen_car = self.values[0]
        taken_cars = get_config_value("taken_cars")
        taken_cars[interaction.user.id] = chosen_car
        edit_config("taken_cars", taken_cars)
        await interaction.response.send_message(f"–í—ã –≤–∑—è–ª–∏ {chosen_car}.", ephemeral=True)


class ReturnCarButton(Button):
    def __init__(self):
        super().__init__(label="–í–µ—Ä–Ω—É—Ç—å –∞–≤—Ç–æ", style=discord.ButtonStyle.red)

    async def callback(self, interaction: discord.Interaction):
        taken_cars = get_config_value("taken_cars")
        user_id_key = str(interaction.user.id)  # –∂–µ—Å—Ç–∫–∏–π –∫–æ—Å—Ç—ã–ª—å –ø–æ—Ç–æ–º—É —á—Ç–æ json –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞–º–∏
        if user_id_key in taken_cars.keys():
            returned_car = taken_cars.pop(user_id_key)
            edit_config("taken_cars", taken_cars)
            await interaction.response.send_message(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏ {returned_car}.", ephemeral=True)
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.", ephemeral=True)


class ShowStatusButton(Button):
    def __init__(self):
        super().__init__(label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", style=discord.ButtonStyle.primary)

    async def callback(self, interaction: discord.Interaction):
        status_message = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:\n"

        cars = get_config_value("cars")
        taken_cars = get_config_value("taken_cars")
        for car in cars:
            owner = next((user for user, taken_car in taken_cars.items() if taken_car == car), "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
            owner_name = f"‚ùå <@{owner}>" if owner != "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" else owner
            status_message += f"üöó {car}: {owner_name}\n"

        await interaction.response.send_message(status_message, ephemeral=True)


@bot.event
async def on_ready():
    print(f'{bot.user.name} –Ω–∞—á–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –µ–±–µ–π—à–µ–π –µ–±–∞—Ç–æ—Ä–∏–µ–π.')
    await bot.tree.sync()
    auto_channel_id = get_config_value("auto_channel_id")
    channel = bot.get_channel(auto_channel_id)
    await send_car_menu(channel)


if __name__ == '__main__':
    bot.run(TOKEN)
